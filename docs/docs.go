// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/addTask/endTime/{taskID}": {
            "put": {
                "description": "Устанавливает время окончания выполнения задачи по её ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Закончить отсчет времени по задаче для пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID задачи",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TaskID: {taskID}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Ошибка Task ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/addTask/startTime/{taskID}": {
            "put": {
                "description": "Устанавливает время начала выполнения задачи по её ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Начать отсчет времени по задаче для пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID задачи",
                        "name": "taskID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TaskID: {taskID}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Ошибка Task ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/addTask/{userID}": {
            "post": {
                "description": "Добавляет новую задачу для указанного пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Добавление новой задачи",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Название задачи",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskName"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "TaskID: {taskID}",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Ошибка конвертирования UserID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/addUser": {
            "post": {
                "description": "Добавляет нового пользователя на основе серии и номера паспорта, обогащает информацию через внешний API (если в .env не указан URL API - получим ответ 500)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Добавление нового пользователя",
                "parameters": [
                    {
                        "description": "Серия и номер пасспорта в формате ` + "`" + `1234 123456` + "`" + ` (4 цифры, пробел, 6 цифр)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PassportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Ошибка декодирования тела запроса",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации серии паспорта или номера паспорта",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/delUser/{userID}": {
            "delete": {
                "description": "Удаляет пользователя из системы по его идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Удаление пользователя по ID",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Пользователь успешно удален",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Ошибка конвертирования ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getTasks/{userID}": {
            "post": {
                "description": "Возвращает список задач пользователя за указанный период времени.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tasks"
                ],
                "summary": "Получение задач пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID пользователя",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Фильтрация по периоду времени: start - начало периода, end - конец периода. Начало и конец прописывать в формате ДД.ММ.ГГГГ",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TaskTime"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список задач пользователя",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Tasks"
                            }
                        }
                    },
                    "422": {
                        "description": "Неправильный ID пользователя",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getUser/{userID}": {
            "get": {
                "description": "Получает информацию о пользователе по его уникальному идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получение информации о пользователе",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с данными пользователя",
                        "schema": {
                            "$ref": "#/definitions/models.UserData"
                        }
                    },
                    "422": {
                        "description": "Ошибка конвертирования ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/getUsers/{page}/{limit}": {
            "post": {
                "description": "Возвращает список пользователей с возможностью фильтрации и пагинации.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Получение списка пользователей",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Номер страницы",
                        "name": "page",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Количество элементов на странице",
                        "name": "limit",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Фильтр пользователей (выбираем по каким полям будет фильтрация, вписываем туда ключ фильтра. Ненужные делаем пусытими или удаляем)",
                        "name": "body",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/models.UserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Успешный ответ с данными пользователей",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.UserData"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/testAdd": {
            "post": {
                "description": "Добавляет нового пользователя на основе серии и номера паспорта, остальная информация берется рандомно, для тестирования и отладки запросов",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Тестовый хендлер: добавление пользователя в обход стороннего API",
                "parameters": [
                    {
                        "description": "Серия и номер пасспорта в формате ` + "`" + `1234 123456` + "`" + ` (4 цифры, пробел, 6 цифр)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PassportRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "UserID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Ошибка валидации серии паспорта или номера паспорта",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/updUser/{userID}": {
            "put": {
                "description": "Обновляет данные пользователя по его идентификатору.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Обновление данных пользователя",
                "parameters": [
                    {
                        "type": "integer",
                        "format": "int64",
                        "description": "User ID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Данные пользователя (неменяемые поля оставляем пустыми)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserData"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Данные пользователя успешно обновлены",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "422": {
                        "description": "Ошибка конвертирования ID",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.PassportRequest": {
            "type": "object",
            "properties": {
                "passportNumber": {
                    "type": "string"
                }
            }
        },
        "models.TaskName": {
            "type": "object",
            "properties": {
                "task_name": {
                    "type": "string"
                }
            }
        },
        "models.TaskTime": {
            "type": "object",
            "properties": {
                "end": {
                    "type": "string"
                },
                "start": {
                    "type": "string"
                }
            }
        },
        "models.Tasks": {
            "type": "object",
            "properties": {
                "all_time": {
                    "type": "string"
                },
                "task_name": {
                    "type": "string"
                }
            }
        },
        "models.UserData": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "passport_number": {
                    "type": "string"
                },
                "passport_series": {
                    "type": "string"
                },
                "patronymic": {
                    "type": "string"
                },
                "surname": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "Тайм-Трекер API",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}

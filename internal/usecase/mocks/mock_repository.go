// Code generated by MockGen. DO NOT EDIT.
// Source: internal/usecase/repo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	models "time-tracker/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockUseCaseStorage is a mock of UseCaseStorage interface.
type MockUseCaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUseCaseStorageMockRecorder
}

// MockUseCaseStorageMockRecorder is the mock recorder for MockUseCaseStorage.
type MockUseCaseStorageMockRecorder struct {
	mock *MockUseCaseStorage
}

// NewMockUseCaseStorage creates a new mock instance.
func NewMockUseCaseStorage(ctrl *gomock.Controller) *MockUseCaseStorage {
	mock := &MockUseCaseStorage{ctrl: ctrl}
	mock.recorder = &MockUseCaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUseCaseStorage) EXPECT() *MockUseCaseStorageMockRecorder {
	return m.recorder
}

// UseCaseAddEndTime mocks base method.
func (m *MockUseCaseStorage) UseCaseAddEndTime(taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseAddEndTime", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseCaseAddEndTime indicates an expected call of UseCaseAddEndTime.
func (mr *MockUseCaseStorageMockRecorder) UseCaseAddEndTime(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseAddEndTime", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseAddEndTime), taskID)
}

// UseCaseAddStartTime mocks base method.
func (m *MockUseCaseStorage) UseCaseAddStartTime(taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseAddStartTime", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseCaseAddStartTime indicates an expected call of UseCaseAddStartTime.
func (mr *MockUseCaseStorageMockRecorder) UseCaseAddStartTime(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseAddStartTime", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseAddStartTime), taskID)
}

// UseCaseCreate mocks base method.
func (m *MockUseCaseStorage) UseCaseCreate(userData models.UserData) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseCreate", userData)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseCaseCreate indicates an expected call of UseCaseCreate.
func (mr *MockUseCaseStorageMockRecorder) UseCaseCreate(userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseCreate", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseCreate), userData)
}

// UseCaseCreateTask mocks base method.
func (m *MockUseCaseStorage) UseCaseCreateTask(userID int, nameTask string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseCreateTask", userID, nameTask)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseCaseCreateTask indicates an expected call of UseCaseCreateTask.
func (mr *MockUseCaseStorageMockRecorder) UseCaseCreateTask(userID, nameTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseCreateTask", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseCreateTask), userID, nameTask)
}

// UseCaseDelete mocks base method.
func (m *MockUseCaseStorage) UseCaseDelete(userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseDelete", userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseCaseDelete indicates an expected call of UseCaseDelete.
func (mr *MockUseCaseStorageMockRecorder) UseCaseDelete(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseDelete", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseDelete), userID)
}

// UseCaseGetTasksUser mocks base method.
func (m *MockUseCaseStorage) UseCaseGetTasksUser(userID int, timeTask models.TaskTime) ([]models.Tasks, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseGetTasksUser", userID, timeTask)
	ret0, _ := ret[0].([]models.Tasks)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseCaseGetTasksUser indicates an expected call of UseCaseGetTasksUser.
func (mr *MockUseCaseStorageMockRecorder) UseCaseGetTasksUser(userID, timeTask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseGetTasksUser", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseGetTasksUser), userID, timeTask)
}

// UseCaseGetUsers mocks base method.
func (m *MockUseCaseStorage) UseCaseGetUsers(dataUser models.UserData, page, limit int) ([]models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseGetUsers", dataUser, page, limit)
	ret0, _ := ret[0].([]models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseCaseGetUsers indicates an expected call of UseCaseGetUsers.
func (mr *MockUseCaseStorageMockRecorder) UseCaseGetUsers(dataUser, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseGetUsers", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseGetUsers), dataUser, page, limit)
}

// UseCaseRead mocks base method.
func (m *MockUseCaseStorage) UseCaseRead(userID int) (models.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseRead", userID)
	ret0, _ := ret[0].(models.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseCaseRead indicates an expected call of UseCaseRead.
func (mr *MockUseCaseStorageMockRecorder) UseCaseRead(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseRead", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseRead), userID)
}

// UseCaseReadTask mocks base method.
func (m *MockUseCaseStorage) UseCaseReadTask(taskID int) (models.TaskData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseReadTask", taskID)
	ret0, _ := ret[0].(models.TaskData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UseCaseReadTask indicates an expected call of UseCaseReadTask.
func (mr *MockUseCaseStorageMockRecorder) UseCaseReadTask(taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseReadTask", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseReadTask), taskID)
}

// UseCaseUpdate mocks base method.
func (m *MockUseCaseStorage) UseCaseUpdate(userID int, userData models.UserData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseCaseUpdate", userID, userData)
	ret0, _ := ret[0].(error)
	return ret0
}

// UseCaseUpdate indicates an expected call of UseCaseUpdate.
func (mr *MockUseCaseStorageMockRecorder) UseCaseUpdate(userID, userData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseCaseUpdate", reflect.TypeOf((*MockUseCaseStorage)(nil).UseCaseUpdate), userID, userData)
}
